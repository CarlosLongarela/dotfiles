# Bash os Zsh functions

# Up n levels in the directory tree
function up {
    levels=$1

    while [ $levels -gt 0 ]; do
        cd ..
        levels=$((levels - 1))
    done
}

# Download a file from GitHub
function github-download() {
    if [ -z "$1" ]; then
        echo "ERROR: Debes proporcionar una URL o ruta de archivo como parámetro.";
        return 1;
    fi;

    local url="$1";

    if [[ $url != http* ]]; then
        url="https://raw.githubusercontent.com/$url";
    fi;

    local filename="${url##*/}";

    curl -LJO "$url" && mv "$filename" "$PWD";
}

function ssh-host {
    # Obtiene la lista de hosts del archivo .ssh/config
    hosts=($(grep '^Host' ~/.ssh/config | awk '{print $2}'))

    # Verificar si se proporcionó un parámetro
    if [[ $# -eq 1 ]]; then
        # Verificar si el parámetro es un número
        if [[ $1 =~ ^[0-9]+$ && $1 -ge 1 && $1 -le ${#hosts[@]} ]]; then
            # Obtener el nombre de host seleccionado
            selected_host=${hosts[$(( $1 ))]}

            # Conectarse al host seleccionado
            ssh $selected_host
            return 1
        else
            # Conectarse al host proporcionado
            ssh $1
            return 1
        fi
    fi

    # Imprime la lista de hosts
    echo ""
    echo "Lista de hosts:"
    echo "--------------"
    echo ""

    i=0
    for host in "${hosts[@]}"; do
        i=$((i+1))
        echo "$i - $host"
    done

    echo ""

    # Pedir al usuario que seleccione un host
    echo "Selecciona un número de 1 a $i para conectarte a un host: "
    read choice

    # Verificar si la selección es válida
    if [[ $choice =~ ^[0-9]+$ && $choice -ge 1 && $choice -le ${#hosts[@]} ]]; then
        # Obtener el nombre de host seleccionado
        selected_host=${hosts[$((choice))]}

        # Conectarse al host seleccionado
        ssh $selected_host
    else
        echo "Selección inválida. Por favor, seleccione un número válido."
    fi
}
